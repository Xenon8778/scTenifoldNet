if(reticulate::py_available(initialize = TRUE)){
if(!reticulate::py_module_available('numpy')){
reticulate::py_install('numpy', envname = 'base')
}
}
system.file('inst/python/nonLinearManifold.py', package = 'PCrTdMa')
file <- system.file('inst/python/nonLinearManifold.py', package = 'PCrTdMa')
library(devtools)
build()
install()
file <- system.file('inst/python/nonLinearManifold.py', package = 'PCrTdMa')
?system.file
file <- system.file('nonLinearManifold.py', package = 'PCrTdMa')
library(PCrTdMa)
file <- system.file('nonLinearManifold.py', package = 'PCrTdMa')
file <- system.file('inst/python/nonLinearManifold.py', package = 'PCrTdMa')
library(Peptides)
?Peptides::readXVG()
file <- system.file('python/nonLinearManifold.py', package = 'PCrTdMa')
reticulate::source_python(file)
manifoldAlignment <- function(X, Y, d=3){
if(reticulate::py_available(initialize = TRUE)){
if(!reticulate::py_module_available('numpy')){
#reticulate::py_install('numpy')
} else {
file <- system.file('python/nonLinearManifold.py', package = 'PCrTdMa')
reticulate::source_python(file)
d <- as.integer(d)
sharedGenes <- intersect(rownames(X), rownames(Y))
X <- X[sharedGenes, sharedGenes]
Y <- Y[sharedGenes, sharedGenes]
L <- Correspondence(matrix=diag(length(sharedGenes)))
manifold_nonlinear(X=X, Y=Y, corr=L, num_dims=d, Wx = X, Wy = Y)
}
}
}
build()
install()
#' @export manifoldAlignment
#' @importFrom reticulate py_available py_module_available source_python
manifoldAlignment <- function(X, Y, d=3){
if(reticulate::py_available(initialize = TRUE)){
if(!reticulate::py_module_available('numpy')){
#reticulate::py_install('numpy')
} else {
file <- system.file('python/nonLinearManifold.py', package = 'PCrTdMa')
reticulate::source_python(file)
d <- as.integer(d)
sharedGenes <- intersect(rownames(X), rownames(Y))
X <- X[sharedGenes, sharedGenes]
Y <- Y[sharedGenes, sharedGenes]
L <- Correspondence(matrix=diag(length(sharedGenes)))
manifold_nonlinear(X=X, Y=Y, corr=L, num_dims=d, Wx = X, Wy = Y)
}
}
}
build()
build()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
build()
install()
build()
install()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build()
devtools::check()
roxygen2::roxygenise()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
library(monocle)
devtools::build()
devtools::build()
devtools::check()
build()
roxygen2::roxygenize()
build()
devtools::check()
